function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * f2 专为适配微信小程序绘图上下文 context 而封装的伪 Canvas
 * @authors (sima.zhang1990@gmail.com)
 * @version 1.0.0
 */
var EventEmitter = require('wolfy87-eventemitter');

var CAPITALIZED_ATTRS_MAP = {
  fillStyle: 'FillStyle',
  fontSize: 'FontSize',
  globalAlpha: 'GlobalAlpha',
  opacity: 'GlobalAlpha',
  lineCap: 'LineCap',
  lineJoin: 'LineJoin',
  lineWidth: 'LineWidth',
  miterLimit: 'MiterLimit',
  strokeStyle: 'StrokeStyle',
  textAlign: 'TextAlign',
  textBaseline: 'TextBaseline',
  shadow: 'Shadow'
};

var Renderer =
/*#__PURE__*/
function (_EventEmitter) {
  _inheritsLoose(Renderer, _EventEmitter);

  function Renderer(myCtx) {
    var _this;

    _this = _EventEmitter.call(this) || this;

    var self = _assertThisInitialized(_assertThisInitialized(_this));

    self.ctx = myCtx;
    self.style = {}; // just mock

    self._initContext(myCtx);

    return _this;
  }

  var _proto = Renderer.prototype;

  _proto.getContext = function getContext(type) {
    if (type === '2d') {
      return this.ctx;
    }
  };

  _proto._initContext = function _initContext(myCtx) {
    Object.keys(CAPITALIZED_ATTRS_MAP).map(function (key) {
      Object.defineProperty(myCtx, key, {
        set: function set(value) {
          // myCtx.setShadow(shadowOffsetX, shadowOffsetY, shadowBlur, shadowColor)
          if (key === 'shadow' && myCtx.setShadow && Array.isArray(value)) {
            myCtx.setShadow(value[0], value[1], value[2], value[3]);
          } else {
            var name = 'set' + CAPITALIZED_ATTRS_MAP[key];
            myCtx[name](value);
          }
        }
      });
      return key;
    });
  };

  return Renderer;
}(EventEmitter);

module.exports = Renderer;